# Aerolith 2.0: A web-based word game website
# Copyright (C) 2011 Cesar Del Solar
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# To contact the author, please email delsolar at gmail dot com

from django.db import models
from django.contrib.auth.models import User
from base.models import Lexicon

# Create your models here.
class GenericTableGameModel(models.Model):
    WORDWALLS_GAMETYPE = 1
    WORDGRIDS_GAMETYPE = 2
    
    SINGLEPLAYER_GAME = 1
    MULTIPLAYER_GAME = 2
    
    
    GAME_TYPES = (
            (WORDWALLS_GAMETYPE, "WordWalls"),
            (WORDGRIDS_GAMETYPE, "WordGrids"),
            )
    PLAYER_TYPES = (
            (SINGLEPLAYER_GAME, "SinglePlayer"),
            (MULTIPLAYER_GAME, "MultiPlayer"),
            )
    lexicon = models.ForeignKey(Lexicon)
    host = models.ForeignKey(User, related_name="%(app_label)s_%(class)s_host")
    inTable = models.ManyToManyField(User, related_name="%(app_label)s_%(class)s_inTable") # everyone in table including the host
    lastActivity = models.DateTimeField(auto_now=True)   # last activity, unix timestamp
    currentGameState = models.TextField()
    gameType = models.IntegerField(choices=GAME_TYPES)
    playerType = models.IntegerField(choices=PLAYER_TYPES)

    # table number will be a primary id
    def __unicode__(self):
        return "Table game #" + str(self.pk) + ' - last activity: ' + str(self.lastActivity)
    
    class Meta:
        abstract = True
        
EVENT_CHOICES = (
                (1, "has changed the room's description."),
                (2, "has joined the room."),
                (3, "has left the room."),
                )

class Message(models.Model):
    # a message such as a chat, a word guess, pretty much any event that happens in a table.
    user = models.ForeignKey(User)
    #table = models.ForeignKey(GenericTableGame, help_text='This message was posted in a given table.')
    event = models.IntegerField(null=True, blank=True, 
            choices=EVENT_CHOICES, help_text='An action performed in the room, either by a user or by the system (e.g. XYZ leaves room.')
    text = models.TextField(null=True, blank=True, help_text='A message, either typed in by a user or generated by the system.')
    unix_timestamp = models.FloatField(editable=False, help_text='Unix timestamp when this message was inserted into the database.')
    created = models.DateTimeField(editable=False)
        