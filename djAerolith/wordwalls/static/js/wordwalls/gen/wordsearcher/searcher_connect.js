// @generated by protoc-gen-connect-es v1.4.0
// @generated from file wordsearcher/searcher.proto (package wordsearcher, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AnagramRequest, AnagramResponse, BlankChallengeCreateRequest, BuildChallengeCreateRequest, DefineRequest, SearchRequest, SearchResponse, WordSearchRequest, WordSearchResponse } from "./searcher_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * QuestionSearcher service searches for questions (duh!)
 *
 * @generated from service wordsearcher.QuestionSearcher
 */
export const QuestionSearcher = {
  typeName: "wordsearcher.QuestionSearcher",
  methods: {
    /**
     * Search takes in a search request and returns a search response.
     * This response can be expanded or not, depending on the `expand` field
     * in SearchRequest.
     *
     * @generated from rpc wordsearcher.QuestionSearcher.Search
     */
    search: {
      name: "Search",
      I: SearchRequest,
      O: SearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Expand takes in an unexpanded search response and returns a
     * search response (fully expanded). See expandedRepr above in
     * the Alphagram field.
     *
     * @generated from rpc wordsearcher.QuestionSearcher.Expand
     */
    expand: {
      name: "Expand",
      I: SearchResponse,
      O: SearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
};

/**
 * @generated from service wordsearcher.Anagrammer
 */
export const Anagrammer = {
  typeName: "wordsearcher.Anagrammer",
  methods: {
    /**
     * Anagram does a simple anagram search; it can either be
     * build mode or regular (exact) mode.
     *
     * @generated from rpc wordsearcher.Anagrammer.Anagram
     */
    anagram: {
      name: "Anagram",
      I: AnagramRequest,
      O: AnagramResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * BlankChallengeCreator creates blank challenges for Aerolith
     *
     * @generated from rpc wordsearcher.Anagrammer.BlankChallengeCreator
     */
    blankChallengeCreator: {
      name: "BlankChallengeCreator",
      I: BlankChallengeCreateRequest,
      O: SearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * BuildChallengeCreator creates build challenges for Aerolith.
     *
     * @generated from rpc wordsearcher.Anagrammer.BuildChallengeCreator
     */
    buildChallengeCreator: {
      name: "BuildChallengeCreator",
      I: BuildChallengeCreateRequest,
      O: SearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
};

/**
 * A WordSearcher is simpler than a QuestionSearcher, in that a QuestionSearcher
 * will search across alphagram information and return questions,
 * and a WordSearcher just cares about the individual words.
 *
 * @generated from service wordsearcher.WordSearcher
 */
export const WordSearcher = {
  typeName: "wordsearcher.WordSearcher",
  methods: {
    /**
     * @generated from rpc wordsearcher.WordSearcher.GetWordInformation
     */
    getWordInformation: {
      name: "GetWordInformation",
      I: DefineRequest,
      O: WordSearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc wordsearcher.WordSearcher.WordSearch
     */
    wordSearch: {
      name: "WordSearch",
      I: WordSearchRequest,
      O: WordSearchResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
};

